<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2013 Google Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.

    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name="Checker">
  <property name="charset" value="UTF-8"/>
  <property name="fileExtensions" value="java, properties, xml"/>

  <module name="RegexpSingleline">
    <!-- Requires a copyright notice in each file.
      Code intended to be open-sourced may have a multi-line copyright
      notice, so that this required text appears on the second line:
      <pre>
        /*
         * Copyright (c) 2014 [Company name]
         *
         * (details of open-source license...)
      </pre>
    -->
    <property name="format"
              value="^(//| \*|#) Copyright (\([cC]\) )?[\d]{4}(\-[\d]{4})? ([\w\s]+).*$"/>
    <property name="minimum" value="1"/>
    <property name="maximum" value="10"/>
    <property name="message" value="copyright is missing or malformed."/>
    <property name="severity" value="error"/>
  </module>

  <!--
  Checks that each Java package has a Javadoc file
  used for commenting.
  -->
  <module name="JavadocPackage"/>

  <!--
  Checks whether files end with a new line.
  -->
  <module name="NewlineAtEndOfFile">
    <property name="fileExtensions" value="java"/>
    <property name="lineSeparator" value="lf"/>
  </module>

  <!--
  Checks that property files contain the same keys.
  -->
  <module name="Translation"/>

  <!--
  Maximum number of lines in any .java file is limited.
  -->
  <module name="FileLength">
    <property name="max" value="1000"/>
    <property name="fileExtensions" value="java"/>
  </module>

  <!--
  TAB chars are not allowed anywhere.
  -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
    <property name="fileExtensions"
              value="java,txt,xml,xsl,xsd,properties,groovy,vm,MF,sh,sql,tokens,g,spec,css,csv"/>
  </module>


  <!--
  Trailing spaces are not allowed anywhere.
  -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <!--
  C++ style inline comment is not allowed.
  -->
  <module name="RegexpSingleline">
    <property name="format" value="/\*.*\*/"/>
    <property name="message" value="This kind of comment is not allowed."/>
  </module>

  <!--
  Windows line endings are not allowed.
  -->
  <module name="RegexpMultiline">
    <property name="format" value="\r\n$"/>
    <property name="message"
              value="Lines in file should end with Unix-like end of line"/>
  </module>

  <!--
  Two consecutive empty lines are not allowed.
  -->
  <module name="RegexpMultiline">
    <property name="format" value="\r?\n[ \t\x0B\f]*\r?\n[ \t\x0B\f]*\r?\n"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="Two consecutive empty lines"/>
  </module>

  <!--
  JavaDoc regexp checks
  -->
  <module name="RegexpSingleline">
    <property name="format" value="\* +@return +[^A-Z]"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="@return tag description should start with capital letter"/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="\* +@param +\w+ +[^A-Z]"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="@param tag description should start with capital letter"/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="synchronized +\(this\) +\{"/>
    <property name="fileExtensions" value="java"/>
    <property name="message"
              value="Using THIS as a lock is a bad practice (use class variable instead)"/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="synchronized +\([\w\.]\.class\) +\{"/>
    <property name="fileExtensions" value="java"/>
    <property name="message"
              value="Using class as a lock is a bad practice (use class variable instead)"/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="org\.apache\.commons\.(codec|lang3?)\.CharEncoding"/>
    <property name="fileExtensions" value="java"/>
    <property name="message" value="Use 'java.nio.charset.StandardCharsets' instead"/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="^ *="/>
    <property name="fileExtensions" value="java"/>
    <property name="message"
              value="Line cannot start with this symbol, move it to the previous line"/>
  </module>

  <!--
  Enable suppressions
  -->
  <module name="SuppressWithNearbyCommentFilter">
    <property name="commentFormat" value="@checkstyle (\w+) \((\d+) lines?\)"/>
    <property name="checkFormat" value="$1"/>
    <property name="influenceFormat" value="$2"/>
  </module>

  <module name="TreeWalker">
    <!-- to enable suppressions -->
    <module name="FileContentsHolder"/>
    <module name="SuppressWarningsHolder"/>

    <!-- Checks for annotations. -->
    <module name="AnnotationUseStyle">
      <property name="elementStyle" value="compact_no_array"/>
      <property name="trailingArrayComma" value="never"/>
      <property name="closingParens" value="ignore"/>
    </module>
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>
    <module name="PackageAnnotation"/>
    <module name="SuppressWarnings"/>

    <module name="OuterTypeFilename"/>
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
      <property name="format"
                value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
      <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
    </module>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters" value="true"/>
      <property name="allowByTailComment" value="true"/>
      <property name="allowNonPrintableEscapes" value="true"/>
    </module>

    <!-- Checks for imports. -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <module name="OneTopLevelClass"/>
    <module name="NoLineWrap"/>
    <module name="EmptyBlock">
      <property name="option" value="TEXT"/>
      <property name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
    </module>
    <module name="NeedBraces"/>
    <module name="LeftCurly">
      <property name="maxLineLength" value="100"/>
    </module>
    <module name="RightCurly"/>
    <module name="RightCurly">
      <property name="option" value="alone"/>
      <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
    </module>
    <module name="AvoidNestedBlocks"/>

    <!-- Checks for class design. -->
    <module name="VisibilityModifier">
      <property name="ignoreAnnotationCanonicalNames"
                value="com.google.gwt.uibinder.client.UiField"/>
    </module>
    <module name="FinalClass"/>
    <module name="InterfaceIsType"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="DesignForExtension"/>
    <module name="MutableException"/>
    <module name="ThrowsCount"/>
    <module name="InnerTypeLast"/>

    <!-- Checks for common coding problems -->
    <module name="ArrayTrailingComma"/>
    <module name="AvoidInlineConditionals"/>
    <module name="CovariantEquals"/>
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="FinalLocalVariable"/>
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
    </module>
    <module name="IllegalInstantiation"/>
    <module name="IllegalToken">
      <property name="tokens" value="POST_INC, POST_DEC"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="MagicNumber"/>
    <module name="ModifiedControlVariable"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="NestedForDepth"/>
    <module name="NestedIfDepth"/>
    <module name="NestedTryDepth"/>
    <module name="NoClone"/>
    <module name="SuperClone"/>
    <module name="SuperFinalize"/>
    <module name="IllegalCatch"/>
    <module name="IllegalThrows"/>
    <module name="PackageDeclaration"/>
    <module name="ReturnCount">
      <property name="max" value="1"/>
    </module>
    <module name="IllegalType"/>
    <module name="DeclarationOrder"/>
    <module name="ParameterAssignment"/>
    <module name="ExplicitInitialization"/>
    <module name="DefaultComesLast"/>
    <module name="RequireThis"/>
    <module name="UnnecessaryParentheses"/>

    <!-- Checks for Javadoc comments. -->
    <module name="JavadocType">
      <!-- Public classes and interfaces require Javadoc comments -->
      <property name="scope" value="public"/>
      <property name="allowUnknownTags" value="true"/>
    </module>
    <module name="JavadocMethod">
      <!-- If a method is public and contains more than 10 lines, it requires Javadoc comments -->
      <property name="scope" value="public"/>
      <property name="minLineCount" value="10"/>
      <!-- Getters and setters don't require Javadoc comments -->
      <property name="allowMissingPropertyJavadoc" value="true"/>
      <property name="allowedAnnotations" value="Override, Test"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingThrowsTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowThrowsTagsForSubclasses" value="true"/>
    </module>

    <!-- Public variables require Javadoc comments, use protected, private whenever possible -->
    <!--<module name="JavadocVariable">-->
      <!--<property name="scope" value="public"/>-->
    <!--</module>-->
    <module name="JavadocStyle"/>
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@author, @version, @param, @return,
                @throws, @exception, @see, @since, @serial, @serialField,
                @serialData, @deprecated, @todo, @checkstyle"/>
    </module>
    <module name="WriteTag">
      <property name="tag" value="@author"/>
      <property name="tagFormat"
                value="^[_A-Za-z0-9-\+]+(\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$"/>
      <property name="severity" value="error"/>
      <property name="tagSeverity" value="ignore"/>
    </module>

    <!-- Metrics. -->
    <module name="BooleanExpressionComplexity"/>
    <module name="ClassDataAbstractionCoupling"/>
    <module name="ClassFanOutComplexity">
      <!--
      Total number of classes that a particular class
      depends on. We're increasing this value because
      default "20" is too low.
      -->
      <property name="max" value="30"/>
    </module>
    <module name="CyclomaticComplexity"/>
    <module name="NPathComplexity"/>
    <module name="JavaNCSS"/>


    <!-- Miscellaneous other checks. -->
    <module name="TodoComment">
      <property name="severity" value="warning"/>
      <property name="format" value="(TODO)|(FIXME)" />
    </module>
    <module name="UpperEll"/>
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters">
      <property name="tokens" value="CTOR_DEF,METHOD_DEF,FOR_EACH_CLAUSE,LITERAL_CATCH"/>
    </module>
    <module name="CommentsIndentation"/>
    <module name="OuterTypeFilename"/>

    <!-- Modifier Checks. -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for Naming Conventions. -->
    <module name="AbbreviationAsWordInNameCheck">
      <property name="allowedAbbreviations" value="IT"/>
      <property name="allowedAbbreviationLength" value="1"/>
    </module>
    <module name="AbstractClassName"/>
    <module name="ConstantName">
      <!-- Allow "log" -->
      <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|log)$"/>
    </module>
    <module name="StaticVariableName"/>

    <!-- Checks for Size Violations. -->
    <module name="ExecutableStatementCount">
      <property name="max" value="20"/>
    </module>
    <module name="LineLength">
      <property name="max" value="100"/>
      <property name="ignorePattern"
                value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>
    <module name="AnonInnerLength"/>
    <module name="MethodLength">
      <property name="tokens" value="METHOD_DEF"/>
      <property name="max" value="20"/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="3"/>
    </module>
    <module name="OuterTypeNumber"/>
    <module name="MethodCount"/>

    <!-- Checks for whitespace. -->
    <module name="GenericWhitespace"/>
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
      <property name="allowEmptyTypes" value="true"/>
      <property name="allowEmptyLoops" value="true"/>
      <message key="ws.notFollowed"
               value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
      <message key="ws.notPreceded"
               value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
    </module>
    <module name="WhitespaceAfter"/>

    <module name="OneStatementPerLine"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="ArrayTypeStyle"/>
    <module name="MissingSwitchDefault"/>
    <module name="FallThrough"/>
    <module name="UpperEll"/>
    <module name="ModifierOrder"/>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="DOT"/>
      <property name="option" value="nl"/>
    </module>
    <module name="SeparatorWrap">
      <property name="tokens" value="COMMA"/>
      <property name="option" value="EOL"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
      <message key="name.invalidPattern"
               value="Package name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="TypeName">
      <message key="name.invalidPattern"
               value="Type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MemberName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Member name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="CatchParameterName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern"
               value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="LocalVariableName">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
      <property name="allowOneCharVarInForLoop" value="true"/>
      <message key="name.invalidPattern"
               value="Local variable name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Class type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Method type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
      <message key="name.invalidPattern"
               value="Interface type name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="NoFinalizer"/>
    <module name="GenericWhitespace">
      <message key="ws.followed"
               value="GenericWhitespace ''{0}'' is followed by whitespace."/>
      <message key="ws.preceded"
               value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
      <message key="ws.illegalFollow"
               value="GenericWhitespace ''{0}'' should followed by whitespace."/>
      <message key="ws.notPreceded"
               value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="braceAdjustment" value="0"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="4"/>
      <property name="lineWrappingIndentation" value="4"/>
      <property name="arrayInitIndent" value="2"/>
    </module>
    <module name="AbbreviationAsWordInName">
      <property name="ignoreFinal" value="false"/>
      <property name="allowedAbbreviationLength" value="1"/>
    </module>
    <module name="OverloadMethodsDeclarationOrder"/>
    <module name="VariableDeclarationUsageDistance"/>
    <module name="MethodParamPad"/>
    <module name="OperatorWrap">
      <property name="option" value="NL"/>
      <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
    </module>
    <module name="AnnotationLocation">
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
    </module>
    <module name="AnnotationLocation">
      <property name="tokens" value="VARIABLE_DEF"/>
      <property name="allowSamelineMultipleAnnotations" value="true"/>
    </module>
    <module name="NonEmptyAtclauseDescription"/>
    <module name="JavadocTagContinuationIndentation"/>
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
    </module>
    <module name="JavadocParagraph"/>
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
      <property name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
      <message key="name.invalidPattern"
               value="Method name ''{0}'' must match pattern ''{1}''."/>
    </module>
    <module name="SingleLineJavadoc">
      <property name="ignoreInlineTags" value="false"/>
    </module>
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected"/>
    </module>
  </module>

  <module name="RegexpMultiline">
    <property name="format"
              value="new java.util.ArrayList(?:&lt;.*?&gt;)?\(\)"/>
    <property name="message"
              value="ArrayList should be initialized with a size parameter"/>
    <property name="fileExtensions" value="java"/>
  </module>

  <module name="SuppressWarningsFilter"/>

  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
    <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
    <property name="checkFormat" value="$1"/>
  </module>

  <module name="SuppressionFilter">
    <property name="file" value="${checkstyleConfigDir}/checkstyle_suppressions.xml"/>
  </module>
</module>
